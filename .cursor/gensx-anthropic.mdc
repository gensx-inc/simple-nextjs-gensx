---
description: How to use the anthropic gensx package
globs: 
alwaysApply: true
---

## GenSX Anthropic Package Syntax

The `@gensx/anthropic`â€‰package provides Anthropic API compatible components for GenSX.

###  GSXChatCompletion

The `GSXChatCompletion` component is an advanced chat completion component that provides enhanced features beyond the standard Anthropic API. It supports structured output, tool calling, and streaming, with automatic handling of tool execution.

#### Structured outputs

```tsx
import * as gensx from "@gensx/core";
import { GSXChatCompletion as AnthropicGSXChat, AnthropicProvider } from "@gensx/anthropic";
import { z } from "zod";

const ExtractEntitiesSchema = z.object({
  people: z.array(z.string()),
  places: z.array(z.string()),
  organizations: z.array(z.string()),
});

const StructuredOutputExample = gensx.Component<{}, typeof ExtractEntitiesSchema>(
  "StructuredOutputExample",
  () => (
    <AnthropicProvider apiKey={process.env.ANTHROPIC_API_KEY}>
      <AnthropicGSXChat
        model="claude-3-7-sonnet-latest"
        system="Extract people, places, and organizations from text." 
        messages={[
          { role: "user", content: "John Doe is a software engineer at Google." },
        ]}
        outputSchema={ExtractEntitiesSchema}
        max_tokens={1000}
      />
    </AnthropicProvider>
  ),
);
```

#### Tools

```tsx
import * as gensx from "@gensx/core";
import { GSXChatCompletion as AnthropicGSXChat, GSXTool, AnthropicProvider } from "@gensx/anthropic";
import { Message } from "@anthropic-ai/sdk/resources/messages";
  
// Define the schema as a Zod object
const weatherSchema = z.object({
  location: z.string(),
});

// Use z.infer to get the type for our parameters
type WeatherParams = z.infer<typeof weatherSchema>;

// Create the tool
const tool = new GSXTool({
  name: "get_weather",
  description: "get the weather for a given location",
  schema: weatherSchema,
  run: async ({ location }: WeatherParams) => {
    console.log("getting weather for", location);
    const weather = ["sunny", "cloudy", "rainy", "snowy"];
    return Promise.resolve({
      weather: weather[Math.floor(Math.random() * weather.length)],
    });
  },
});

  const ToolsExample = gensx.Component<{}, Message>(
  "ToolsExample",
  () => (
    <AnthropicProvider apiKey={process.env.ANTHROPIC_API_KEY}>
      <AnthropicGSXChat
        system="You're a helpful weather assistant."
        messages={[
          {
            role: "user",
            content: `What's the weather like in Seattle?'`,
          },
        ]}
        model="claude-3-7-sonnet-latest"
        temperature={0.7}
        tools={[tool]}
        max_tokens={1000}
      />
    </AnthropicProvider>
  ),
);
```

### Simplified Anthropic Chat

The `ChatCompletion` component provides a simplified interface for chat completions. It returns either a string or a simple stream of string tokens, making it easier to use in UI components.

```tsx
import { AnthropicProvider, ChatCompletion as AnthropicChat } from "@gensx/anthropic";

const SimpleAnthropicChat = gensx.Component<{}, string>(
  "SimpleAnthropicChat",
  () => (
    <AnthropicProvider apiKey={process.env.ANTHROPIC_API_KEY}>
      <AnthropicChat
        model="claude-3-7-sonnet-latest"
        system="You're a helpful assistant."
        messages={[
          { role: "user", content: "What is a programmable tree?" },
        ]}
        max_tokens={1000}
      />
    </AnthropicProvider>
  ),
);
```

### AnthropicChatCompletion (Low-Level)

The `AnthropicChatCompletion` component is a low-level component that directly maps to the Anthropic SDK. It has identical inputs and outputs to the Anthropic API, making it suitable for advanced use cases where you need full control.

```tsx
import { AnthropicChatCompletion } from "@gensx/anthropic";
import { Message } from "@anthropic-ai/sdk/resources/messages";

const LowLevelAnthropicChat = gensx.Component<{}, Message>(
  "LowLevelAnthropicChat",
  () => (
    <AnthropicProvider apiKey={process.env.ANTHROPIC_API_KEY}>
      <AnthropicChatCompletion
        model="claude-3-7-sonnet-latest"
        system="You're a helpful assistant."
        messages={[
          { role: "user", content: "Explain recursion." },
        ]}
        max_tokens={1000}
      />
    </AnthropicProvider>
  ),
);
```